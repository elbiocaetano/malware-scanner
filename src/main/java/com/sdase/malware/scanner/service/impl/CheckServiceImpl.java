package com.sdase.malware.scanner.service.impl;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.sdase.malware.scanner.checker.Checker;
import com.sdase.malware.scanner.entity.CheckRequest;
import com.sdase.malware.scanner.exception.NotProcessedException;
import com.sdase.malware.scanner.exception.PreValidationException;
import com.sdase.malware.scanner.repository.CheckRequestRepository;
import com.sdase.malware.scanner.service.CheckService;
import com.sdase.malware.scanner.streaming.model.CheckEvent;
import com.sdase.malware.scanner.streaming.model.CheckResultEvent;
import com.sdase.malware.scanner.utils.FileUtils;

@Service
public class CheckServiceImpl implements CheckService {
	
	private final Map<String, Checker> checkers;
	
	@Autowired
	private CheckRequestRepository checkRequestRepository;
	
	@Autowired
	public CheckServiceImpl(List<Checker> checkerBeans) {
		checkers = checkerBeans.stream().collect(Collectors.toMap(c -> c.getClass().getName(), Function.identity()));
	}
	
	@Override
	public String saveCheckRequest(CheckEvent checkEvent) {
		try {
			String content = FileUtils.loadPdfContent(checkEvent.getUrl());
			return checkRequestRepository.save(new CheckRequest(content, LocalDateTime.now())).getId();
			
		} catch (IOException ioe) {
			throw new PreValidationException("An error ocurred while opening file", ioe);
		}
	}

	@Override
	public List<CheckResultEvent> getCheckResult(String id) {
		
		var check = checkRequestRepository.findById(id);
		if (check.isPresent() && check.get().getResults() != null) {
			return check.get().getResults();
		}
		
		throw new NotProcessedException(id);
		
	}

	@Override
	public void checkFiles(Integer chunkSize) {
		var chunk = checkRequestRepository.getChunkToCheck(PageRequest.of(0, chunkSize));
		chunk.getContent().forEach(checkRequest -> {
			List<CheckResultEvent> results = new ArrayList<>();
			for(var entry: checkers.entrySet()) {
				results.add(entry.getValue().check(checkRequest.getContent()));
			}
			checkRequest.setResults(results);
			checkRequest.setFinishedAt(LocalDateTime.now());
			checkRequestRepository.save(checkRequest);
		});
	}

}
