package com.sdase.malware.scanner.exception.handler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import com.sdase.malware.scanner.exception.NotProcessedException;
import com.sdase.malware.scanner.exception.PreValidationException;
import com.sdase.malware.scanner.streaming.model.CheckResultEvent;
import com.sdase.malware.scanner.streaming.model.CheckResultEvent.StateEnum;
import com.sdase.malware.scanner.utils.LoggerUtils;

@ControllerAdvice
public class ResourceExceptionHandler {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(ResourceExceptionHandler.class);
	
	@ExceptionHandler(NotProcessedException.class)
	public ResponseEntity<Void> handleNotProcessedException(NotProcessedException npe) {
	
		LoggerUtils.logError(LOGGER, String.format("File with id: %s was not processed yet", npe.getId()));
		return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	}
	
	@ExceptionHandler(PreValidationException.class)
	public ResponseEntity<CheckResultEvent> handlePreValidationException(PreValidationException pve) {
	
		LoggerUtils.logError(LOGGER, String.format("Problem on file pre validation: %s", pve.getMessage()));
		return ResponseEntity.unprocessableEntity().body(new CheckResultEvent(StateEnum.IGNORED, "pre-validation", pve.getMessage()));
	}
	
	@ExceptionHandler(Exception.class)
	public ResponseEntity<CheckResultEvent> handleException(Exception e) {
	
		LoggerUtils.logError(LOGGER, String.format("An error ocurred while processing this file: %s", e.getMessage()));
		return ResponseEntity.internalServerError().body(new CheckResultEvent(StateEnum.ERROR, "error", e.getMessage()));
	}

}
