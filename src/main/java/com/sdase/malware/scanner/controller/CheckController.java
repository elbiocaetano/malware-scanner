package com.sdase.malware.scanner.controller;

import java.net.URI;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.sdase.malware.scanner.service.CheckService;
import com.sdase.malware.scanner.streaming.model.CheckEvent;
import com.sdase.malware.scanner.streaming.model.CheckResultEvent;
import com.sdase.malware.scanner.utils.LoggerUtils;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Example;
import io.swagger.annotations.ExampleProperty;
import io.swagger.annotations.ResponseHeader;

@RestController
@RequestMapping("/check")
public class CheckController {

	private static final Logger LOGGER = LoggerFactory.getLogger(CheckController.class);

	@Autowired
	private CheckService checkService;

	@ApiOperation(value = "Sends a request to save the file in database for further check")
	@ApiResponses(value = {
			@ApiResponse(code = 202, message = "Accepted", response = String.class, responseHeaders = {
					@ResponseHeader(name = "location", response = URI.class) }),
			@ApiResponse(code = 422, message = "Unprocessable Entity", response = CheckResultEvent.class, examples = @Example(value = {
					@ExampleProperty(value = "{\"state\":\"IGNORED\",\"name\":\"pre-validation\",\"details\":\"An error ocurred while opening file\"}", mediaType = "application/json") })) })
	@ResponseStatus(HttpStatus.ACCEPTED)
	@PostMapping(produces = "application/json", consumes = "application/json")
	public ResponseEntity<Void> checkRequest(@Validated @RequestBody CheckEvent checkEvent) {
		String id = checkService.saveCheckRequest(checkEvent);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(id).toUri();

		LoggerUtils.logInfo(LOGGER, String.format("event: %s url: %s", checkEvent.toString(), uri.toString()));
		return ResponseEntity.accepted().location(uri).build();
	}

	@ApiOperation(value = "Retrieve the check results")
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = String.class, examples = @Example(value = {
					@ExampleProperty(value = "[{\"state\":\"OK\",\"name\":\"iban-checker\",\"details\":\"This file has a valid IBAN code\"}]", mediaType = "application/json"),
					@ExampleProperty(value = "[{\"state\":\"IGNORED\",\"name\":\"iban-checker\",\"details\":\"This file does not have an IBAN number\"}]", mediaType = "application/json"),
					@ExampleProperty(value = "[{\"state\":\"SUSPICIOUS\",\"name\":\"iban-checker\",\"details\":\"This IBAN code is on blacklist\"}]", mediaType = "application/json") })),
			@ApiResponse(code = 404, message = "Not Found") })
	@ResponseStatus(HttpStatus.OK)
	@GetMapping(value = "/{id}", produces = "application/json")
	public ResponseEntity<List<CheckResultEvent>> getCheckResult(@PathVariable String id) {

		LoggerUtils.logInfo(LOGGER, String.format("id: %s result: %s", id, checkService.getCheckResult(id).toString()));
		return ResponseEntity.ok().body(checkService.getCheckResult(id));
	}

}
