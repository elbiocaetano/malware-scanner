package com.sdase.malware.scanner.service.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import com.sdase.malware.scanner.checker.impl.IbanChecker;
import com.sdase.malware.scanner.entity.CheckRequest;
import com.sdase.malware.scanner.exception.NotProcessedException;
import com.sdase.malware.scanner.exception.PreValidationException;
import com.sdase.malware.scanner.repository.CheckRequestRepository;
import com.sdase.malware.scanner.utils.TestUtils;

@SpringBootTest
class CheckServiceImplTest {

	@MockBean
	private IbanChecker checker;

	@MockBean
	private CheckRequestRepository checkRequestRepository;

	@Autowired
	private CheckServiceImpl checkService;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.openMocks(checkService);
	}

	@Test
	void saveCheckRequestFileNotFoundTest() {
		var event = TestUtils.buildCheckEvent("/non-existing-url");
		var exception = assertThrows(PreValidationException.class, () -> checkService.saveCheckRequest(event));
		assertEquals("An error ocurred while opening file", exception.getMessage());
	}

	@Test
	void saveCheckRequestSucessTest() {
		var event = TestUtils.buildCheckEvent("src/test/resources/Testdaten_Rechnungseinreichung.pdf");
		when(checkRequestRepository.save(any(CheckRequest.class))).thenReturn(TestUtils.buildCheckRequest(null));
		var response = checkService.saveCheckRequest(event);
		assertEquals("abcdefg", response);
	}

	@Test
	void getCheckResultNotProcessedExceptionTest() {
		when(checkRequestRepository.findById("abcdefg")).thenReturn(Optional.empty());
		assertThrows(NotProcessedException.class, () -> checkService.getCheckResult("abcdefg"));
	}

	@Test
	void getCheckResultNotProcessedExceptionEmptyResultsTest() {
		when(checkRequestRepository.findById("abcdefg")).thenReturn(Optional.of(TestUtils.buildCheckRequest(null)));
		assertThrows(NotProcessedException.class, () -> checkService.getCheckResult("abcdefg"));
	}

	@Test
	void getCheckResultSuccessTest() {
		when(checkRequestRepository.findById("abcdefg"))
				.thenReturn(Optional.of(TestUtils.buildCheckRequest(TestUtils.buildCheckResultEvents())));
		var response = checkService.getCheckResult("abcdefg");
		assertEquals(2, response.size());
		assertEquals("OK", response.get(0).getState().name());
		assertEquals("iban-checker", response.get(0).getName());
		assertEquals("This file has a valid IBAN code", response.get(0).getDetails());

		assertEquals("ERROR", response.get(1).getState().name());
		assertEquals("other-checker", response.get(1).getName());
		assertEquals("This file has an error", response.get(1).getDetails());
	}

	@Test
	void checkFilesNoFoundFilesTest() {
		when(checkRequestRepository.getChunkToCheck(any(Pageable.class))).thenReturn(new PageImpl<>(new ArrayList<>()));
		checkService.checkFiles(10);
		verify(checkRequestRepository).getChunkToCheck(any(Pageable.class));
		verify(checkRequestRepository, times(0)).save(any(CheckRequest.class));
	}

	@Test
	void checkFilesSucessTest() {
		when(checkRequestRepository.getChunkToCheck(any(Pageable.class)))
				.thenReturn(new PageImpl<>(List.of(TestUtils.buildCheckRequest(TestUtils.buildCheckResultEvents()))));
		checkService.checkFiles(10);
		verify(checkRequestRepository).getChunkToCheck(any(Pageable.class));
		verify(checkRequestRepository).save(any(CheckRequest.class));
	}

}
